name: Docker CI & Push

on:
  push: {}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # 1. Code auschecken
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. QEMU + Buildx vorbereiten (Multi-Arch-Ready)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Einloggen in GitHub Container Registry (GHCR) – 
      #    kann auch auf Docker Hub umgestellt werden, wenn ihr secrets.DOCKERHUB_USERNAME/TOKEN anlegt
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. Backend-Image bauen und pushen
      - name: Build & Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ toLower(github.repository_owner) }}/nightcrawler-backend:${{ github.sha }}
            ghcr.io/${{ toLower(github.repository_owner) }}/nightcrawler-backend:latest

      # 5. Frontend-Image bauen und pushen
      - name: Build & Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ toLower(github.repository_owner) }}/nightcrawler-frontend:${{ github.sha }}
            ghcr.io/${{ toLower(github.repository_owner) }}/nightcrawler-frontend:latest

      # 6. (Optional) Docker-Compose-Stack lokal starten – 
      #    nur wenn ihr einen integrierten Test haben wollt
      - name: Start Test Stack
        run: |
          docker-compose up -d
          # hier könnten einfache Smoke-Tests folgen, z.B. Health-Endpoint aufrufen
          docker-compose down

      # 7. Alte lokale Images und Builder-Ressourcen entfernen
      - name: Cleanup Local Docker
        run: docker system prune -af
